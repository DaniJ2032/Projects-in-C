//#include <stdio.h>
//#include <string.h>
//#include "xparameters.h"
//#include "xil_cache.h"
//#include "xgpio.h"
//#include "platform.h"
//#include "xuartlite.h"
//#include "microblaze_sleep.h"
//
//#define PORT_IN	 		XPAR_AXI_GPIO_0_DEVICE_ID //XPAR_GPIO_0_DEVICE_ID
//#define PORT_OUT 		XPAR_AXI_GPIO_0_DEVICE_ID //XPAR_GPIO_0_DEVICE_ID
//
////Device_ID Operaciones
//#define def_SOFT_RST            0
//#define def_ENABLE_MODULES      1
//#define def_LOG_RUN             2
//#define def_LOG_READ            3
//
//XGpio GpioOutput;
//XGpio GpioParameter;
//XGpio GpioInput;
//u32 GPO_Value;
//u32 GPO_Param;
//XUartLite uart_module;
//
//void EnvioTrama (char, char);
//
//
//int main()
//{
//	init_platform();
//	int Status;
//	int indice = 0;
//	int error  = 0;
//	int flag_inicio = 0;
//
//	XUartLite_Initialize(&uart_module, 0);
//
//	GPO_Value=0x00000000;
//	GPO_Param=0x00000000;
//
//	unsigned char dato[4];
//
//	Status=XGpio_Initialize(&GpioInput, PORT_IN);
//	if(Status!=XST_SUCCESS){
//		return XST_FAILURE;
//	}
//	Status=XGpio_Initialize(&GpioOutput, PORT_OUT);
//	if(Status!=XST_SUCCESS){
//		return XST_FAILURE;
//	}
//	XGpio_SetDataDirection(&GpioOutput, 1, 0x00000000);
//	XGpio_SetDataDirection(&GpioInput, 1, 0xFFFFFFFF);
//
//	u32  value;
//	u32  byte_dato_low;
//	u32  byte_dato_high;
//	u32  resultado_dato;
//
//	unsigned char salida;
//
//	while(1){
//		read(stdin,&dato[0],1);
//
//		if (error != 1){
//			switch (indice){
//			case 0:
//				if (dato[0] == 0xA2){
//					error = 0;
//					flag_inicio = 1;
//				}
//				else error = 1;
//
//				break;
//
//			case 1:
//				if (dato[0] == 0x00) error = 0 ;
//				else error = 1;
//				break;
//
//			case 2:
//				if (dato[0] == 0x00) error = 0 ;
//				else error = 1;
//				break;
//
//			case 3:
//				if (dato[0] == 0x01) error = 0 ;
//				else error = 1;
//				break;
//
//			case 4:
//					byte_dato_high = dato[0];
//					break;
//
//			case 5:
//					byte_dato_low = dato[0];
//					break;
//
//			case 6:
//				if (dato[0] == 0x42){
//
//					error = 0;
//					resultado_dato = (byte_dato_high << 8) + byte_dato_low;
//					XGpio_DiscreteWrite(&GpioOutput,1, (u32) resultado_dato);
//
//					if(resultado_dato == 0x001){	//Pido el estado de los switch
//						XGpio_DiscreteWrite(&GpioOutput,1, (u32) 0x00000000);
//						value = XGpio_DiscreteRead(&GpioInput, 1);
//						salida=(char)(value&(0x0000000F));
//						EnvioTrama('S',salida);
//						resultado_dato = 0x000;
//					}
//				}
//				else error = 1;
//				break;
//
//			} //fin del case
//		} //fin de if
//
//		else{
////			error       = 0;
////			indice      = 0;
////			flag_inicio = 0;
//
//			if (error == 1){
//				EnvioTrama('0','F');	//si se detecto un error se envia los siguientes datos
//				indice = 0;
//				flag_inicio = 0;
//				error = 0;
//			}
//
//		}
//
//		if (flag_inicio == 1) indice += 1; //Incremento del indice
//
//		if 	(indice == 7){
//			indice = 0;
//			flag_inicio = 0;	//cuando el indice es 7 lo reinicio hasta la proxima
//			error = 0;			//trama a recibir
//		}
//
////		if (error == 1){
////			EnvioTrama('0','F');	//si se detecto un error se envia los siguientes datos
////			indice = 0;
////			flag_inicio = 0;
////			error = 0;
////		}
//	} //Fin de while(1)
//
//	cleanup_platform();
//	return 0;
//} //Fin de main()
//
///*Con esta funcion se envia una trama ya sea con el valor de los switch
// * o cuando se detecto un error*/
//void EnvioTrama (char dato1, char dato2){
//
//	unsigned char trama [7] = {0xA2, 0x00, 0x00, 0x01, dato1, dato2, 0x42};
//
//			while(XUartLite_IsSending(&uart_module)){};
//			XUartLite_Send(&uart_module,trama,7);
//}


/////////////////////////////////
//#include <stdio.h>
//#include <string.h>
//#include "xparameters.h"
//#include "xil_cache.h"
//#include "xgpio.h"
//#include "platform.h"
//#include "xuartlite.h"
//#include "microblaze_sleep.h"
//
//#define PORT_IN	 		XPAR_AXI_GPIO_0_DEVICE_ID //XPAR_GPIO_0_DEVICE_ID
//#define PORT_OUT 		XPAR_AXI_GPIO_0_DEVICE_ID //XPAR_GPIO_0_DEVICE_ID
//
////Device_ID Operaciones
//#define def_SOFT_RST            0
//#define def_ENABLE_MODULES      1
//#define def_LOG_RUN             2
//#define def_LOG_READ            3
//
//XGpio GpioOutput;
//XGpio GpioParameter;
//XGpio GpioInput;
//u32 GPO_Value;
//u32 GPO_Param;
//XUartLite uart_module;
//
//void EnvioTrama (char, char);
//
//
//int main()
//{
//	init_platform();
//	int Status;
//	int indice = 0;
//	int error  = 0;
//	int flag_inicio = 0;
//
//	XUartLite_Initialize(&uart_module, 0);
//
//	GPO_Value=0x00000000;
//	GPO_Param=0x00000000;
//
//	unsigned char dato[4];
//
//	Status=XGpio_Initialize(&GpioInput, PORT_IN);
//	if(Status!=XST_SUCCESS){
//		return XST_FAILURE;
//	}
//	Status=XGpio_Initialize(&GpioOutput, PORT_OUT);
//	if(Status!=XST_SUCCESS){
//		return XST_FAILURE;
//	}
//	XGpio_SetDataDirection(&GpioOutput, 1, 0x00000000);
//	XGpio_SetDataDirection(&GpioInput, 1, 0xFFFFFFFF);
//
//	u32  value;
//	u32  byte_dato_low;
//	u32  byte_dato_high;
//	u32  resultado_dato;
//
//	unsigned char salida;
//
//	while(1){
//		read(stdin,&dato[0],1);
//
//		if (error == 0){
//            switch (indice){
//			case 0:
//				if (dato[0] == 0xA2){
//					error = 0;
//					flag_inicio = 1;
//				}
//				else error = 1;
//
//				break;
//
//			case 1:
//				if (dato[0] == 0x00) error = 0 ;
//				else error = 1;
//				break;
//
//			case 2:
//				if (dato[0] == 0x00) error = 0 ;
//				else error = 1;
//				break;
//
//			case 3:
//				if (dato[0] == 0x01) error = 0 ;
//				else error = 1;
//				break;
//
//			case 4:
//					byte_dato_high = dato[0];
//					break;
//
//			case 5:
//					byte_dato_low = dato[0];
//					break;
//
//			case 6:
//				if (dato[0] == 0x42){
//
//					error = 0;
//					resultado_dato = (byte_dato_high << 8) + byte_dato_low;
//					XGpio_DiscreteWrite(&GpioOutput,1, (u32) resultado_dato);
//
//					if(resultado_dato == 0x001){	//Pido el estado de los switch
//						XGpio_DiscreteWrite(&GpioOutput,1, (u32) 0x00000000);
//						value = XGpio_DiscreteRead(&GpioInput, 1);
//						salida=(char)(value&(0x0000000F));
//						EnvioTrama('S',salida);
//						resultado_dato = 0x000;
//					}
//				}
//				else error = 1;
//				break;
//
//			} //fin del case
//		} //fin de if
//
//		else{
//			if (error == 1){
//				EnvioTrama('0','F');	//si se detecto un error se envia los siguientes datos
//				indice = 0;
//				flag_inicio = 0;
//				error = 0;
//			}
//		}
//
//		if (flag_inicio == 1 && error == 0) indice += 1; //Incremento del indice
//
//		if 	(indice == 7 && error == 0){
//			indice = 0;
//			flag_inicio = 0;	//cuando el indice es 7 lo reinicio hasta la proxima
//			error = 0;			//trama a recibir
//		}
//
//	} //Fin de while(1)
//
//	cleanup_platform();
//	return 0;
//} //Fin de main()
//
///*Con esta funcion se envia una trama ya sea con el valor de los switch
// * o cuando se detecto un error*/
//void EnvioTrama (char dato1, char dato2){
//    unsigned char trama [7] = {0xA2, 0x00, 0x00, 0x01, dato1, dato2, 0x42};
//    while(XUartLite_IsSending(&uart_module)){};
//	XUartLite_Send(&uart_module,trama,7);
//}

#include <stdio.h>
#include <string.h>
#include "xparameters.h"
#include "xil_cache.h"
#include "xgpio.h"
#include "platform.h"
#include "xuartlite.h"
#include "microblaze_sleep.h"

#define PORT_IN	 		XPAR_AXI_GPIO_0_DEVICE_ID //XPAR_GPIO_0_DEVICE_ID
#define PORT_OUT 		XPAR_AXI_GPIO_0_DEVICE_ID //XPAR_GPIO_0_DEVICE_ID

//Device_ID Operaciones
#define def_SOFT_RST            0
#define def_ENABLE_MODULES      1
#define def_LOG_RUN             2
#define def_LOG_READ            3

XGpio GpioOutput;
XGpio GpioParameter;
XGpio GpioInput;
u32 GPO_Value;
u32 GPO_Param;
XUartLite uart_module;

void EnvioTrama (char, char);


int main()
{
	init_platform();
	int Status;
	int indice = 0;
	int error  = 0;
	int flag_inicio = 0;
	XUartLite_Initialize(&uart_module, 0);

	GPO_Value=0x00000000;
	GPO_Param=0x00000000;

	unsigned char dato[4];

	Status=XGpio_Initialize(&GpioInput, PORT_IN);
	if(Status!=XST_SUCCESS){
		return XST_FAILURE;
	}
	Status=XGpio_Initialize(&GpioOutput, PORT_OUT);
	if(Status!=XST_SUCCESS){
		return XST_FAILURE;
	}
	XGpio_SetDataDirection(&GpioOutput, 1, 0x00000000);
	XGpio_SetDataDirection(&GpioInput, 1, 0xFFFFFFFF);

	u32  value;
	u32  byte_dato_low;
	u32  byte_dato_high;
	u32  resultado_dato;

	unsigned char salida;

	while(1){
		read(stdin,&dato[0],1);

//		if (error == 0){
            switch (indice){
			case 0:
				if (dato[0] == 0xA2){
					error = 0;
					flag_inicio = 1;
				}
				else {
					error = 1;
				}

				break;

			case 1:
				if (dato[0] == 0x00) error = 0 ;

				else {
					error = 1;
				}
				break;

			case 2:
				if (dato[0] == 0x00) error = 0 ;

				else {
					error = 1;
				}
				break;

			case 3:
				if (dato[0] == 0x01) error = 0 ;

				else {
					error = 1;
				}
				break;

			case 4:
					byte_dato_high = dato[0];
					break;

			case 5:
					byte_dato_low = dato[0];
					break;

			case 6:
				if (dato[0] == 0x42){

					if (error == 0){
						resultado_dato = (byte_dato_high << 8) + byte_dato_low;
						XGpio_DiscreteWrite(&GpioOutput,1, (u32) resultado_dato);

						if(resultado_dato == 0x001){	//Pido el estado de los switch
							XGpio_DiscreteWrite(&GpioOutput,1, (u32) 0x00000000);
							value = XGpio_DiscreteRead(&GpioInput, 1);
							salida=(char)(value&(0x0000000F));
							EnvioTrama('S',salida);
							resultado_dato = 0x000;
						}
					}
					else if (error == 1) EnvioTrama('0','F');
				}
				else{
					error = 1;
					EnvioTrama('0','F');
				}
				break;

			} //fin del case

//		} //fin de if

		//revisar¡¡¡¡¡¡¡
//		else{
//
//			if(dato[0] == '\n' || '\r') error = 0;
////          indice = 0;
////			flag_inicio = 0;
////			error = 0;
//
//		}

		if (flag_inicio == 1 && error == 0) indice += 1; //Incremento del indice

		if 	(indice == 7 && error == 0){
			indice = 0;
			flag_inicio = 0;	//cuando el indice es 7 lo reinicio hasta la proxima
			error = 0;			//trama a recibir
		}


	} //Fin de while(1)
	
	cleanup_platform();
	return 0;
} //Fin de main()

/*Con esta funcion se envia una trama ya sea con el valor de los switch
 * o cuando se detecto un error*/
void EnvioTrama (char dato1, char dato2){
    unsigned char trama [7] = {0xA2, 0x00, 0x00, 0x01, dato1, dato2, 0x42};
    while(XUartLite_IsSending(&uart_module)){};
	XUartLite_Send(&uart_module,trama,7);
}

